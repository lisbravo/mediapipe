# MyMediaPipe gestures recognition subgraph.

type: "dynamicGesturesSubgraphCPU"

input_stream: "LANDMARKS:hand_landmarks"
input_stream: "ANGLES:angles"
input_stream: "DETECTIONS:detections"



node {
  calculator: "MergeCalculator"
  input_stream: "trasition_gesture_clear"
  input_stream: "moving_gesture_clear"
  input_stream: "writing_gesture_clear"
  input_stream: "tbd_gesture_clear"
  input_stream: "fixed_gesture_clear"
  output_stream: "gesture_clear"
}

node {
  calculator: "FlowLimiterCalculator"
  input_stream: "detections"
  input_stream: "FINISHED:gesture_clear"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
   output_stream: "throttled_detections"
}

node {
   calculator: "gestureClassifierCalculator"
   input_stream: "DETECTIONS:throttled_detections"
   #input_stream: "CLEAR:gesture_clear"
   output_stream: "LATCH_TRANSITION:transition_gesture_flag"
   output_stream: "LATCH_MOVING:moving_gesture_flag"
   output_stream: "LATCH_WRITING:writing_gesture_flag"
   output_stream: "LATCH_FIXED:fixed_gesture_flag"
   output_stream: "TBD:tbd_gesture_clear"
    node_options: {
     [type.googleapis.com/mediapipe.gestureClassifierCalculatorOptions] {
       gestures_types_file_name: "myMediapipe/projects/dynamicGestures/dynamic_gestures_map.txt"
     }
   }
 }

# only allow passage of packets related 
# to transition gestures
node {
  calculator: "LatchCalculator"
  input_stream: "hand_landmarks"
  input_stream: "detections"
  input_stream: "LATCH:transition_gesture_flag"
  output_stream: "latched_transition_landmarks"
  output_stream: "latched_transition_detection"

}

node {
  calculator: "transitionDynamicGesturesCalculator"
  input_stream: "NORM_LANDMARKS:latched_transition_landmarks"
  input_stream: "DETECTIONS:latched_transition_detection"

  output_stream: "FLAG:trasition_gesture_clear"
  output_stream: "MQTT_MESSAGE:message_transition"
  node_options: {
    [type.googleapis.com/mediapipe.transitionDynamicGesturesCalculatorOptions] {
      time_out_s: 1.50
      actions_map { start_action: 0 end_action: 2 
        mqtt_message{ topic: "handCommander/tv/ir_command" payload: "KEY_POWER"}
      }
      actions_map { start_action: 2 end_action: 0 
        mqtt_message{ topic: "handCommander/tv/ir_command" payload: "KEY_POWER"}
      }
    }
  }
}

# only allow passage of packets related 
# to moving gestures
node {
  calculator: "LatchCalculator"
  input_stream: "hand_landmarks"
  input_stream: "detections"
  input_stream: "angles"
  input_stream: "LATCH:moving_gesture_flag"
  output_stream: "latched_moving_landmarks"
  output_stream: "latched_moving_detection"
  output_stream: "latched_moving_angles"
}

node {
  calculator: "movingDynamicGesturesCalculator"
  input_stream: "NORM_LANDMARKS:latched_moving_landmarks"
  input_stream: "DETECTIONS:latched_moving_detection"
  input_stream: "ANGLES:latched_moving_angles"
  output_stream: "FLAG:moving_gesture_clear"
  output_stream: "MQTT_MESSAGE:message_moving"
  node_options: {
    [type.googleapis.com/mediapipe.movingDynamicGesturesCalculatorOptions] {
      moving_time_out_s: 1.50
      moving_actions_map { start_action: 6                action_type: ROTATION 
                           landmark_id: 0                 angle_number: 1
                           action_threshold: 0.1          time_between_actions: 0.5
                           auto_repeat: true              max_repeat: 5
                           topic: "handCommander/tv/ir_command"
                           positive_payload: "KEY_VOLUMEUP"  negative_payload: "KEY_VOLUMEDOWN"}
      moving_actions_map { start_action: 4                action_type: TRASLATION 
                           landmark_id: 0                 angle_number: 0
                           action_threshold: 0.1          time_between_actions: 0.5
                           auto_repeat: false
                           topic: "handCommander/VLC" 
                           positive_payload: "next" negative_payload: "prev"}                     
    }
  }
}

# only allow passage of packets related 
# to writing gestures
node {
  calculator: "LatchCalculator"
  input_stream: "hand_landmarks"
  input_stream: "detections"
  input_stream: "LATCH:writing_gesture_flag"
  output_stream: "latched_writing_landmarks"
  output_stream: "latched_writing_detection"
}

node {
  calculator: "writingDynamicGesturesCalculator"
  input_stream: "NORM_LANDMARKS:latched_writing_landmarks"
  input_stream: "DETECTIONS:latched_writing_detection"
  output_stream: "FLAG:writing_gesture_clear"
  output_stream: "MQTT_MESSAGE:message_writing"
  node_options: {

    [type.googleapis.com/mediapipe.writingDynamicGesturesCalculatorOptions] {
      time_out_ms: 2500
      landmark_id: 8
      window_for_angle_detection: 15
      angle_min_limit: 140
      angle_max_limit: 220
      accute_angle_trigger: 3  # Number of deteccted angles in the windows to trigger an "accute angle detected" routine
      ratio_trigger: 1.4
      time_to_inference: 3.0 # This is the time to wait between a start condition (accute angle detected) and inference 
      watchdog_time: 4.0     # To avoid blocking in the case that current drawing is too noisy  or gable
      prediction_threshold: 0.7
    }
  }
}

# only allow passage of packets related 
# to fixed gestures
node {
  calculator: "LatchCalculator"
  input_stream: "hand_landmarks"
  input_stream: "detections"
  input_stream: "angles"
  input_stream: "LATCH:fixed_gesture_flag"
  output_stream: "latched_fixed_landmarks"
  output_stream: "latched_fixed_detection"
  output_stream: "latched_fixed_angles"
}

node {
  calculator: "fixedDynamicGesturesCalculator"
  input_stream: "NORM_LANDMARKS:latched_fixed_landmarks"
  input_stream: "DETECTIONS:latched_fixed_detection"
  input_stream: "ANGLES:latched_fixed_angles"
  output_stream: "FLAG:fixed_gesture_clear"
  output_stream: "MQTT_MESSAGE:message_fixed"
  node_options: {

    [type.googleapis.com/mediapipe.fixedDynamicGesturesCalculatorOptions] {
      fixed_time_out_s: 1.50
      fixed_actions_map { start_action: 1                
                          time_between_actions: 5.0
                          auto_repeat: false             
                          mqtt_message{ topic: "handCommander/tv/ir_command" payload: "KEY_MUTE"}
                        }
      fixed_actions_map { start_action: 3                 
                          landmark_id: 0                 angle_number: 1                
                          angle_limits{angle_limit_pos: 1.8           
                                       angle_limit_neg: 1.2}
                          angle_limits{angle_limit_pos: -0.8           
                                       angle_limit_neg: -1.4} 
                          angle_limits{angle_limit_pos: 0.85           
                                       angle_limit_neg: 0.35}
                          angle_limits{angle_limit_pos: 2.8           
                                       angle_limit_neg: 2.4}            
                          time_between_actions: 1.5      auto_repeat: true
                          mqtt_message{ topic: "handCommander/tv/ir_command" payload: "KEY_VOLUMEUP"} 
                          mqtt_message{ topic: "handCommander/tv/ir_command" payload: "KEY_VOLUMEDOWN"}
                          mqtt_message{ topic: "handCommander/VLC" payload: "next"}          
                          mqtt_message{ topic: "handCommander/VLC" payload: "prev"}                          }
    }
  }
}
node {
  calculator: "MergeCalculator"
  input_stream: "message_fixed"
  input_stream: "message_writing"
  input_stream: "message_moving"
  input_stream: "message_transition"
  output_stream: "message"
}

node {
  calculator: "MqttPublisherCalculator"
  input_stream: "MQTT_MESSAGE:message"
  node_options: {

   [type.googleapis.com/mediapipe.MqttPublisherCalculatorOptions] {
      client_id: "HandCommander"
      broker_ip:  "192.168.1.59"
      broker_port: 1883
      #user: user          #optional
      #password: password  #optional
      
    }
  }
}


